'From Pharo7.0.2 of 15 March 2019 [Build information: Pharo-7.0.2+build.154.sha.9f17218676db0c1a0dd5d1b03226e660dbd674b6 (32 Bit)] on 6 April 2019 at 11:39:58.001137 pm'!Object subclass: #Polynomial	instanceVariableNames: 'coefficient'	classVariableNames: ''	poolDictionaries: ''	category: 'COS382'!!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/7/2017 17:01'!coefficient: power	"return coefficient of power term"	(power >= coefficient size) ifTrue: [ ^ 0 ].	^ coefficient at: power + 1! !!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/7/2017 17:02'!initialize: initValue	"private: initialize coefficient instance variable"	(initValue isKindOf: (self class))		ifTrue: [ coefficient := (initValue asArray) deepCopy ]		ifFalse: [			(initValue isKindOf: Array)				ifTrue: [ coefficient := initValue deepCopy ]				ifFalse: [ self initialize ]		]! !!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/7/2017 17:00'!asArray	"return array representation"	^ coefficient deepCopy! !!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/5/2015 17:37'!initialize	super initialize.	coefficient := #( 0 )! !!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/7/2017 17:01'!degree	"return degree of polynomial"	^ coefficient size - 1! !!Polynomial methodsFor: 'math functions' stamp: 'MattHapner 4/6/2019 18:03'!sum: aPoly	"returns a polynomial that is the sum of two polynomials"	| p q max min res |		p := self asArray.	q := aPoly asArray.	(p size) > (q size) ifTrue: [		max := p size.		min := q size.		res := Array new: max.		1 to: max do: [ :i | res at: i put: (p at: i)].		1 to: min do: [:i | res at: i put: ((res at: i) +  (q at: i))].			].	(p size) <= (q size) ifTrue: [		max := q size.		min := p size.		res := Array new: max.		1 to: max do: [ :i | res at: i put: (q at: i)].		1 to: min do: [:i | res at: i put: ((res at: i) +  (p at: i))].				].		^ Polynomial new initialize: res.! !!Polynomial methodsFor: 'as yet unclassified' stamp: 'MattHapner 4/6/2019 17:57'!differentiate	"returns the derivate of the polynomial"	| length list deg new_deg coeff |	deg := 0.	new_deg := 0.	length := self asArray size - 1.	list := Array new: length.	1 to: (self degree + 1) do: [ :i |		deg := i - 1.		coeff := self coefficient: deg.		new_deg := deg - 1.		(new_deg >= 0) ifTrue: [ 			list at: (new_deg + 1) put: (coeff * deg).		].	].	^ Polynomial new initialize: list.! !!Polynomial methodsFor: 'as yet unclassified' stamp: 'MattHapner 4/6/2019 22:47'!graphFrom: fromNumber graphTo: toNumber	"displays a graph of the polynomial from fromNmuber to toNumber using Graph-ET class"	| diag |	diag := GETDiagramBuilder new.	diag lineDiagram	    height: 200;	    models: (fromNumber to: toNumber);	    y: [ :x | self evaluate: x ]; "Block uses parameter x"	    color: Color black;	    regularAxisAsInteger.	diag open.! !!Polynomial methodsFor: 'public access' stamp: 'MattHapner 4/6/2019 15:53'!evaluate: aNumber	"returns the polynomial evaluated at aNumber"	| power coeff sum |	sum := 0.	1 to: (self degree + 1) do: [ :i |		power := i - 1.		coeff := self coefficient: power.		sum := sum + (coeff * (aNumber raisedTo: power))		].	^ sum.! !!Polynomial methodsFor: 'public access' stamp: 'MattHapner 4/6/2019 17:04'!evaluate	"returns the polynomial at the value given from the prompt"	| s x num |	s := String new.	s := 'Enter number to evaluate at:'.	x := UIManager default   request: s withCRs   initialAnswer:'0'   title:'Evaluate Polynomial'.	num := x asNumber.	^ self evaluate: num.! !!Polynomial methodsFor: 'comparing' stamp: 'JonDenning 3/7/2017 16:58'!= aPoly    "compares two polynomials"    ^ coefficient = aPoly asArray ! !!Polynomial methodsFor: 'comparing' stamp: 'JonDenning 3/7/2017 16:55'!< aPoly	^ self shouldNotImplement ! !!Polynomial methodsFor: 'comparing' stamp: 'JonDenning 3/7/2017 16:54'!!!= aPoly	^ self ~= aPoly! !